server:
  port: 8081

spring:
  project:
    name: Visit Seoul Pass BackOffice
    version: 1.0.0
    description: Visit Seoul Pass BackOffice Management System
  profiles:
    active: local
  application:
    name: project-VisitSeoulPass-BackOffice

  main:
    allow-bean-definition-overriding: true
  
  # Database Configuration
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://sihyeonpostgresqltest.cj4uii2s059j.ap-northeast-2.rds.amazonaws.com:5432/btpdb
    username: sihyeon
    password: 1qaz2wsxA!#%&(
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      driver-class-name: org.postgresql.Driver
  
  # H2 Console Configuration
  h2:
    console:
      enabled: true
      path: /h2-console
  
  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        default_schema: public
  
  # DevTools Configuration
  devtools:
    restart:
      enabled: true
      additional-paths: src/main/java
      exclude: static/**,public/**
    livereload:
      enabled: true
  
  # Swagger Configuration
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  # OAuth2 Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: your-google-client-id
            client-secret: your-google-client-secret
            scope:
              - email
              - profile
          kakao:
            client-id: your-kakao-client-id
            client-secret: your-kakao-client-secret
            scope:
              - profile_nickname
              - profile_image
              - account_email
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            client-name: Kakao
            client-authentication-method: POST
          naver:
            client-id: your-naver-client-id
            client-secret: your-naver-client-secret
            scope:
              - name
              - email
              - profile_image
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# JWT Configuration
jwt:
  secret: visitSeoulPassSecretKey
  expiration: 86400000

# Logging Configuration
logging:
  level:
    root: DEBUG
    org.springframework: DEBUG
    org.hibernate: DEBUG
    com.visitSeoulPass: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    jdbc:
      sqlonly: INFO
      sqltiming: INFO
      resultsettable: INFO
      audit: OFF
      resultset: OFF
      connection: OFF
